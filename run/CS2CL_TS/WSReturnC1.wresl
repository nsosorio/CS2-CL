!Anna Fock  Oct 2003
/* Calculation of Westside Return Disggregation
Disaggregation of one CALSIM Westside Return arc to DSM2-based arcs (Part B prefix, # of arcs)
CALSIM                DSM2
Westside Return(R,1)    = Westside Groundwater Returns (GWR,multiple) <--- from SJRIO
                    + Westside Surface Water Return (SWR,1) <--- from calculation

Lump DSM2-based groundwater arcs to ONE at the corresponding CALSIM Westside return location in DSM2
CALSIM                DSM2
Westside Return(R,1)     = Westside Groundwater Return (R_gw,1)
                    + Westside Surface Water Return (SWR,1)<--- from calculation

*********************Calculation of Westside Surface Water Returns*************************
!CALSIM Westside returns in DSM2-SJR schematic
!Higher resolution due to using WESTSIM assumption of subregion return flow locations

CALSIM                 to                 DSM2-SJR Node
R639West (Hospital WD)                     17 (Vernalis)
R630f (West Stanislaus WD)                 607 (Finnegan Cut)
R630c (Kern Canon WD)                     613 (Westley Wasteway)
R630a & R630d (Del Puerto and Salado WD)    613 (Patterson Sewage)
R630h & R630i (Patterson water right and WD)    624 (Lake Ramona)
R630e (Sunflower WD)                     628 (based on GIS)
R619West                                 631 (Orestimba Creek)
R614West (except R614d)                     642 (Mud Slough)
R614d (Laguna WD)                         648 (Salt Slough)
*/
define EC_Mendota_Pool {    select EC_Mendota_Pool
                    from EC_Table_MPool
                    where wyt_SAC_cvp = wyt_SAC_cvp, month = month}

define EC_MP_Ag_Return { value EC_Mendota_Pool + 500.0 }

define R639B      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}
define R630f      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}
define R630c      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}
define R630a      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}
define R630d      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}
define R630h      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}
define R630i      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}
define R630e      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}
define R614K      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}
define R614L      {timeseries   kind 'FLOW-RETURN'  units 'CFS'}

define SWR17_C1  { value R639B - R_gw17             }
define SWR607_C1 { value R630f - R_gw607             }
define SWR613_C1 { value R630c                 }
define SWR622_C1 { value R630a + R630d - R_gw622     }
define SWR624_C1 { value R630h + R630i - R_gw624     }
define SWR628_C1 { value R630e - R_gw628             }
define SWR631_C1 { value C619 - R_gw631             }
define SWR642_C1 { value R614K + R614L         } !Level 2 Refuge component to R614West
define SWR648_C1 { value R614West - SWR642_C1            } !"Other" component to R614West

define SWR_MP_RF_C1 { value R607i } !Level 2 Refuge component of R607West
define SWR_MP_Ag_C1 { value R607West - R607i } !Ag component of R607West

!EC Calculation of CALSIM Westside Returns
define EC1_MP_RF { value EC_SWR642 }

define EC1_R607West {
    Case nearzero {
        condition R607West < 0.0001
        value 0.0 }
    Case otherwise {
        condition always
        value ( max( 0.0 ,
            SWR_MP_RF_C1 * EC1_MP_RF
            + SWR_MP_Ag_C1 * EC_MP_Ag_Return )
            / max( 0.0001, R607West) ) } }
define EC1_R_MdotaWest {alias EC1_R607West  kind 'EC-WSRETURN'  units 'UMHOS/CM'}  

define EC1_R614 {
    Case nearzero {
        condition R614West < 0.0001
        value 0.0 }
    Case otherwise {
        condition always
        value ( max( 0.0 ,
            SWR648_C1 * EC_SWR648
            + SWR642_C1 * EC_SWR642 )
            / max( 0.0001, R614West) ) } }
define EC1_R_SJRMs {alias EC1_R614  kind 'EC-WSRETURN'  units 'UMHOS/CM'}  

define EC1_R_SJRMer{std kind 'EC-WSRETURN'  units 'UMHOS/CM'}
define EC1_R619 {
    Case nearzero {
        condition C619 < 0.0001
        value 0.0 }
    Case otherwise {
        condition always
        value ( max (0.0 ,
            SWR631_C1 * EC_SWR631
            + R_gw631 * EC_R_gw631 )
            / max( 0.0001, C619) )} }
goal setEC1_R_SJRMer{ EC1_R_SJRMer = EC1_R619 }


define EC1_R630 {
    Case nearzero {
        condition R630West < 0.0001
        value 0.0 }
    Case otherwise {
        condition always
        value ( max (0.0,
              SWR628_C1 * EC_SWR628 + R_gw628 * EC_R_gw628
            + SWR624_C1 * EC_SWR624 + R_gw624 * EC_R_gw624
            + SWR622_C1 * EC_SWR622 + R_gw622 * EC_R_gw622
            + SWR613_C1 * EC_SWR613
            + SWR607_C1 * EC_SWR607 + R_gw607 * EC_R_gw607)
            / max(0.0001 , R630West) )} }
define EC1_R_SJRTUOL {alias EC1_R630  kind 'EC-WSRETURN'  units 'UMHOS/CM'} 


define EC1_R639 {
    Case nearzero {
        condition R639B < 0.0001
        value 0.0 }
    Case otherwise {
        condition always
        value ( max (0.0,
            SWR17_C1 * EC_SWR17 +  R_gw17 * EC_R_gw17 )
            / max (0.0001, R639B) ) } }
define EC1_R_SJRVer {alias EC1_R639  kind 'EC-WSRETURN'  units 'UMHOS/CM'}